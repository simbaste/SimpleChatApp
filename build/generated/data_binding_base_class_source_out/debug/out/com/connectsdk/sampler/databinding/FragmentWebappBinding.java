// Generated by view binder compiler. Do not edit!
package com.connectsdk.sampler.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.connectsdk.sampler.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentWebappBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button closeWebAppButton;

  @NonNull
  public final EditText freeMessageEditText;

  @NonNull
  public final Button joinWebAppButton;

  @NonNull
  public final Button launchWebAppButton;

  @NonNull
  public final Button leaveWebAppButton;

  @NonNull
  public final Button pinWebAppButton;

  @NonNull
  public final TextView responseMessageTextView;

  @NonNull
  public final Button sendFreeMessage;

  @NonNull
  public final Button sendJSONButton;

  @NonNull
  public final Button sendMessageButton;

  @NonNull
  public final Button unPinWebAppButton;

  private FragmentWebappBinding(@NonNull LinearLayout rootView, @NonNull Button closeWebAppButton,
      @NonNull EditText freeMessageEditText, @NonNull Button joinWebAppButton,
      @NonNull Button launchWebAppButton, @NonNull Button leaveWebAppButton,
      @NonNull Button pinWebAppButton, @NonNull TextView responseMessageTextView,
      @NonNull Button sendFreeMessage, @NonNull Button sendJSONButton,
      @NonNull Button sendMessageButton, @NonNull Button unPinWebAppButton) {
    this.rootView = rootView;
    this.closeWebAppButton = closeWebAppButton;
    this.freeMessageEditText = freeMessageEditText;
    this.joinWebAppButton = joinWebAppButton;
    this.launchWebAppButton = launchWebAppButton;
    this.leaveWebAppButton = leaveWebAppButton;
    this.pinWebAppButton = pinWebAppButton;
    this.responseMessageTextView = responseMessageTextView;
    this.sendFreeMessage = sendFreeMessage;
    this.sendJSONButton = sendJSONButton;
    this.sendMessageButton = sendMessageButton;
    this.unPinWebAppButton = unPinWebAppButton;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentWebappBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentWebappBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_webapp, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentWebappBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.closeWebAppButton;
      Button closeWebAppButton = ViewBindings.findChildViewById(rootView, id);
      if (closeWebAppButton == null) {
        break missingId;
      }

      id = R.id.freeMessageEditText;
      EditText freeMessageEditText = ViewBindings.findChildViewById(rootView, id);
      if (freeMessageEditText == null) {
        break missingId;
      }

      id = R.id.joinWebAppButton;
      Button joinWebAppButton = ViewBindings.findChildViewById(rootView, id);
      if (joinWebAppButton == null) {
        break missingId;
      }

      id = R.id.launchWebAppButton;
      Button launchWebAppButton = ViewBindings.findChildViewById(rootView, id);
      if (launchWebAppButton == null) {
        break missingId;
      }

      id = R.id.leaveWebAppButton;
      Button leaveWebAppButton = ViewBindings.findChildViewById(rootView, id);
      if (leaveWebAppButton == null) {
        break missingId;
      }

      id = R.id.pinWebAppButton;
      Button pinWebAppButton = ViewBindings.findChildViewById(rootView, id);
      if (pinWebAppButton == null) {
        break missingId;
      }

      id = R.id.responseMessageTextView;
      TextView responseMessageTextView = ViewBindings.findChildViewById(rootView, id);
      if (responseMessageTextView == null) {
        break missingId;
      }

      id = R.id.sendFreeMessage;
      Button sendFreeMessage = ViewBindings.findChildViewById(rootView, id);
      if (sendFreeMessage == null) {
        break missingId;
      }

      id = R.id.sendJSONButton;
      Button sendJSONButton = ViewBindings.findChildViewById(rootView, id);
      if (sendJSONButton == null) {
        break missingId;
      }

      id = R.id.sendMessageButton;
      Button sendMessageButton = ViewBindings.findChildViewById(rootView, id);
      if (sendMessageButton == null) {
        break missingId;
      }

      id = R.id.unPinWebAppButton;
      Button unPinWebAppButton = ViewBindings.findChildViewById(rootView, id);
      if (unPinWebAppButton == null) {
        break missingId;
      }

      return new FragmentWebappBinding((LinearLayout) rootView, closeWebAppButton,
          freeMessageEditText, joinWebAppButton, launchWebAppButton, leaveWebAppButton,
          pinWebAppButton, responseMessageTextView, sendFreeMessage, sendJSONButton,
          sendMessageButton, unPinWebAppButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
